
# Generated by CodiumAI
from dsptools.utils.notifications import send_email
import msal
import requests

class TestSendEmail:

    # Successfully send an email without an attachment
    def test_send_email_without_attachment(self, mocker):
        # Mock the MSAL ConfidentialClientApplication and requests.post
        mock_app = mocker.patch('msal.ConfidentialClientApplication')
        mock_acquire_token = mock_app.return_value.acquire_token_silent
        mock_acquire_token.return_value = {"access_token": "fake_token"}
        mock_post = mocker.patch('requests.post')
        mock_post.return_value.status_code = 202

        # Call the function
        send_email(
            email_clientid="fake_client_id",
            email_secret="fake_secret",
            email_tenantid="fake_tenant_id",
            emails=["recipient@example.com"],
            subject="Test Subject",
            message="<html><body>Test Message</body></html>"
        )

        # Assertions
        mock_acquire_token.assert_called_once_with(["https://graph.microsoft.com/.default"], account=None)
        mock_post.assert_called_once()
        assert mock_post.call_args[1]['headers']['Authorization'] == "Bearer fake_token"

    # Raise EmailAttachmentError for unsupported attachment types
    def test_send_email_unsupported_attachment_type(self):
        from dsptools.utils.notifications import send_email
        from dsptools.errors.data import EmailAttachmentError
        import pytest

        with pytest.raises(EmailAttachmentError, match="Unsupported attachment file type. Supported types: PDF, DOC, CSV, TXT, LOG"):
            send_email(
                email_clientid="fake_client_id",
                email_secret="fake_secret",
                email_tenantid="fake_tenant_id",
                emails=["recipient@example.com"],
                subject="Test Subject",
                message="<html><body>Test Message</body></html>",
                attachment="unsupported_file_type.exe"
            )

    # Successfully send an email with a supported attachment
    def test_send_email_with_supported_attachment(self, mocker):
        # Mock the MSAL ConfidentialClientApplication and requests.post
        mock_app = mocker.patch('msal.ConfidentialClientApplication')
        mock_acquire_token = mock_app.return_value.acquire_token_silent
        mock_acquire_token.return_value = {"access_token": "fake_token"}
        mock_post = mocker.patch('requests.post')
        mock_post.return_value.status_code = 202

        # Call the function with supported attachment
        send_email(
            email_clientid="test_client_id",
            email_secret="test_client_secret",
            email_tenantid="test_tenant_id",
            emails=["test@example.com"],
            subject="Test Subject",
            message="<html><body>Test Message</body></html>",
            attachment="test_attachment.pdf"
        )

        # Assertions
        assert msal.ConfidentialClientApplication.called
        assert requests.post.called